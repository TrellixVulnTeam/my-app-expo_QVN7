"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getStorageRulesConfig = void 0;
const error_1 = require("../../../error");
function getAbsoluteRulesPath(rules, options) {
    return options.config.path(rules);
}
function getStorageRulesConfig(projectId, options) {
    const storageConfig = options.config.data.storage;
    if (!storageConfig) {
        throw new error_1.FirebaseError("Cannot start the Storage emulator without rules file specified in firebase.json: run 'firebase init' and set up your Storage configuration");
    }
    if (!Array.isArray(storageConfig)) {
        if (!storageConfig.rules) {
            throw new error_1.FirebaseError("Cannot start the Storage emulator without rules file specified in firebase.json: run 'firebase init' and set up your Storage configuration");
        }
        const resource = "default";
        return [{ resource, rules: getAbsoluteRulesPath(storageConfig.rules, options) }];
    }
    const results = [];
    const { rc } = options;
    for (const targetConfig of storageConfig) {
        if (!targetConfig.target) {
            throw new error_1.FirebaseError("Must supply 'target' in Storage configuration");
        }
        rc.requireTarget(projectId, "storage", targetConfig.target);
        rc.target(projectId, "storage", targetConfig.target).forEach((resource) => {
            results.push({ resource, rules: getAbsoluteRulesPath(targetConfig.rules, options) });
        });
    }
    return results;
}
exports.getStorageRulesConfig = getStorageRulesConfig;

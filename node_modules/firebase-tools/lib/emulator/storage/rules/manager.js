"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StorageRulesManager = void 0;
const chokidar = require("chokidar");
const fs = require("fs");
const emulatorLogger_1 = require("../../emulatorLogger");
const types_1 = require("../../types");
const error_1 = require("../../../error");
class StorageRulesManager {
    constructor(_runtime) {
        this._runtime = _runtime;
        this._watcher = new chokidar.FSWatcher();
        this._logger = emulatorLogger_1.EmulatorLogger.forEmulator(types_1.Emulators.STORAGE);
    }
    get ruleset() {
        return this._ruleset;
    }
    async setSourceFile(rules) {
        var _a;
        const prevRulesFile = (_a = this._sourceFile) === null || _a === void 0 ? void 0 : _a.name;
        let rulesFile;
        if (typeof rules === "string") {
            this._sourceFile = { name: rules, content: readSourceFile(rules) };
            rulesFile = rules;
        }
        else {
            this._sourceFile = rules;
            rulesFile = rules.name;
        }
        const issues = await this.loadRuleset();
        this.updateWatcher(rulesFile, prevRulesFile);
        return issues;
    }
    async close() {
        delete this._sourceFile;
        delete this._ruleset;
        await this._watcher.close();
    }
    updateWatcher(rulesFile, prevRulesFile) {
        if (prevRulesFile) {
            this._watcher.unwatch(prevRulesFile);
        }
        this._watcher = chokidar
            .watch(rulesFile, { persistent: true, ignoreInitial: true })
            .on("change", async () => {
            await new Promise((res) => setTimeout(res, 5));
            this._logger.logLabeled("BULLET", "storage", "Change detected, updating rules for Cloud Storage...");
            await this.loadRuleset();
        });
    }
    async loadRuleset() {
        const { ruleset, issues } = await this._runtime.loadRuleset({ files: [this._sourceFile] });
        if (ruleset) {
            this._ruleset = ruleset;
            return issues;
        }
        delete this._ruleset;
        issues.all.forEach((issue) => {
            try {
                const parsedIssue = JSON.parse(issue);
                this._logger.log("WARN", `${parsedIssue.description_.replace(/\.$/, "")} in ${parsedIssue.sourcePosition_.fileName_}:${parsedIssue.sourcePosition_.line_}`);
            }
            catch (_a) {
                this._logger.log("WARN", issue);
            }
        });
        return issues;
    }
}
exports.StorageRulesManager = StorageRulesManager;
function readSourceFile(fileName) {
    try {
        return fs.readFileSync(fileName).toString();
    }
    catch (error) {
        if (error.code === "ENOENT") {
            throw new error_1.FirebaseError(`File not found: ${fileName}`);
        }
        throw error;
    }
}
